{"version":3,"sources":["images/NoSideFront.jpg","Admin.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Admin","allCards","showCard","hideCard","hubConnection","setPlayingIntro","setPlayingClockHint","setPlayingMusic","useState","hint","setHint","className","map","card","key","id","onClick","hidden","toString","onSubmit","e","preventDefault","invoke","onChange","target","value","type","Game","playerName","setHubConnection","cards","setCards","setAllCards","shownCard","setShownCard","playingIntro","introPlayed","setIntroPlayed","playingClockHint","playingMusic","red","setRed","blue","setBlue","useEffect","connection","SignalR","withUrl","withAutomaticReconnect","configureLogging","Information","build","console","log","start","then","a","connectionId","on","message","setTimeout","width","height","src","frameborder","allow","allowfullscreen","style","display","length","maxWidth","margin","textAlign","filter","x","process","toLowerCase","cardIndex","App","setPlayerName","submitted","setSubmitted","placeholder","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b660673f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/NoSideFront.9ef274ea.jpg\";","import React, { useState } from \"react\";\r\n\r\nconst Admin = ({\r\n  allCards,\r\n  showCard,\r\n  hideCard,\r\n  hubConnection,\r\n  setPlayingIntro,\r\n  setPlayingClockHint,\r\n  setPlayingMusic,\r\n}) => {\r\n  const [hint, setHint] = useState();\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    hubConnection.invoke(\"giveHint\", hint);\r\n  };\r\n\r\n  const playIntro = () => {\r\n    hubConnection.invoke(\"playIntro\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"adminCards\">\r\n        {allCards &&\r\n          allCards.map((card) => (\r\n            <button\r\n              key={card.id}\r\n              onClick={() =>\r\n                card.hidden ? showCard(card.id) : hideCard(card.id)\r\n              }\r\n            >\r\n              {card.id} -- {card.hidden.toString()}\r\n            </button>\r\n          ))}\r\n      </div>\r\n\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          className=\"inputBig\"\r\n          onChange={(e) => {\r\n            setHint(e.target.value);\r\n          }}\r\n        ></input>\r\n        <button type=\"submit\">Send Players Hint</button>\r\n      </form>\r\n\r\n      <button\r\n        onClick={() => {\r\n          playIntro();\r\n        }}\r\n      >\r\n        Play intro\r\n      </button>\r\n\r\n      <button\r\n        onClick={() => {\r\n          hubConnection.invoke(\"playClockHint\");\r\n        }}\r\n      >\r\n        Play Clock Hint\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Admin;\r\n","import * as SignalR from \"@microsoft/signalr\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport Front from \"./images/NoSideFront.jpg\";\r\n\r\nimport Admin from \"./Admin\";\r\n\r\nconst Game = ({ playerName }) => {\r\n  const [hubConnection, setHubConnection] = useState(null);\r\n  const [cards, setCards] = useState(null);\r\n  const [allCards, setAllCards] = useState(null);\r\n  const [players, setPlayers] = useState();\r\n  const [shownCard, setShownCard] = useState(null);\r\n  const [hint, setHint] = useState(null);\r\n  const [playingIntro, setPlayingIntro] = useState(false);\r\n  const [introPlayed, setIntroPlayed] = useState(false);\r\n  const [playingClockHint, setPlayingClockHint] = useState(false);\r\n  const [playingMusic, setPlayingMusic] = useState(false);\r\n  const [red, setRed] = useState(null);\r\n  const [blue, setBlue] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const connection = new SignalR.HubConnectionBuilder()\r\n      .withUrl(\"https://lfg.games/gamehub\")\r\n      .withAutomaticReconnect(5000)\r\n      .configureLogging(SignalR.LogLevel.Information)\r\n      .build();\r\n\r\n    setHubConnection(connection);\r\n  }, []);\r\n\r\n  console.log(\"refresh\");\r\n  useEffect(() => {\r\n    if (hubConnection) {\r\n      hubConnection.start().then((a) => {\r\n        // Once started, invokes the sendConnectionId in our ChatHub inside our ASP.NET Core application.\r\n        if (hubConnection.connectionId) {\r\n          hubConnection.invoke(\"joinGame\", hubConnection.connectionId);\r\n        }\r\n\r\n        hubConnection.invoke(\"getDisplayed\");\r\n        hubConnection.on(\"getDisplayed\", (message) => {\r\n          setCards(message);\r\n        });\r\n\r\n        hubConnection.invoke(\"getCards\");\r\n        hubConnection.on(\"getCards\", (message) => {\r\n          setAllCards(message);\r\n        });\r\n\r\n        hubConnection.on(\"giveHint\", (message) => {\r\n          setHint(message);\r\n        });\r\n\r\n        hubConnection.on(\"playIntro\", (message) => {\r\n          setPlayingMusic(false);\r\n          setPlayingIntro(true);\r\n          setIntroPlayed(true);\r\n          setTimeout(() => {\r\n            setPlayingIntro(false);\r\n            setPlayingMusic(true);\r\n          }, 180000);\r\n        });\r\n\r\n        hubConnection.on(\"tryAddCards\", (message) => {\r\n          setHint(message);\r\n        });\r\n\r\n        hubConnection.on(\"playClockHint\", (message) => {\r\n          setPlayingMusic(false);\r\n          setPlayingClockHint(true);\r\n          setTimeout(() => {\r\n            setPlayingClockHint(false);\r\n            setPlayingMusic(true);\r\n            console.log(\"can play clock hint again\");\r\n          }, 180000);\r\n        });\r\n      });\r\n    }\r\n  }, [hubConnection, playerName]);\r\n\r\n  ///This was too laggy to use, leaving here in case I can find a way to make it not laggy\r\n  //   const getCardImage = (index) => {\r\n  //     const rowLimit = 10;\r\n  //     const rowSelected = Math.floor(index / rowLimit); // number of times row limit goes into index + 1 = row count\r\n  //     const h = 1310;\r\n  //     const w = 723;\r\n  //     // x to card index x card width\r\n  //     const x = Math.floor(w * (index % rowLimit));\r\n  //     // y to card heght * row number\r\n  //     const y = rowSelected * h;\r\n\r\n  //     const style = {\r\n  //       objectFit: \"none\",\r\n  //       height: h,\r\n  //       width: w,\r\n  //       objectPosition: `-${x}px -${y}px`,\r\n  //     };\r\n\r\n  //     return <img src={Front} style={style} alt=\"card\"></img>;\r\n  //   };\r\n\r\n  const showCard = (cardIndex) => {\r\n    hubConnection.invoke(\"showCard\", cardIndex);\r\n    hubConnection.on(\"getCards\", (cards) => setAllCards(cards));\r\n    hubConnection.on(\"getDisplayed\", (message) => {\r\n      setCards(message);\r\n    });\r\n  };\r\n\r\n  const hideCard = (cardIndex) => {\r\n    hubConnection.invoke(\"hideCard\", cardIndex);\r\n    hubConnection.on(\"getCards\", (cards) => setAllCards(cards));\r\n    hubConnection.on(\"getDisplayed\", (message) => {\r\n      setCards(message);\r\n    });\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!red || !blue) return;\r\n\r\n    hubConnection.invoke(\"tryAddCards\", red, blue);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {playingIntro && (\r\n        <iframe\r\n          width=\"560\"\r\n          height=\"315\"\r\n          src=\"https://www.youtube.com/embed/SiwXDkQW-os?autoplay=1\"\r\n          frameborder=\"0\"\r\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n          allowfullscreen\r\n          style={{ display: \"none\" }}\r\n        ></iframe>\r\n      )}\r\n      {cards && cards.length === 0 ? (\r\n        <div></div>\r\n      ) : (\r\n        playingMusic && (\r\n          <iframe\r\n            width=\"560\"\r\n            height=\"315\"\r\n            src=\"https://www.youtube.com/embed/mlLGwW7eHTI?autoplay=1&loop=1\"\r\n            style={{ display: \"none\" }}\r\n            frameborder=\"0\"\r\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n            allowfullscreen\r\n          ></iframe>\r\n        )\r\n      )}\r\n\r\n      {cards && cards.length === 0 && !introPlayed ? (\r\n        <div className=\"centerFlex\">\r\n          <div></div>\r\n          <div style={{ maxWidth: \"1200px\", margin: \"20px\" }}>\r\n            <iframe\r\n              width=\"560\"\r\n              height=\"315\"\r\n              src=\"https://www.youtube.com/embed/xNjyG8S4_kI?autoplay=1\"\r\n              frameborder=\"0\"\r\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n              allowfullscreen\r\n            ></iframe>\r\n            <h1>If you can't see this then it isn't working</h1>\r\n            <h2>Welcome to the the back of beyond</h2>\r\n            <h3>\r\n              There's a mysterious fog in the air, coming from Nosides mansion,\r\n              it's your job to go sort it out.\r\n            </h3>\r\n            <h3>Good Luck.</h3>\r\n            <h4>\r\n              This isn't a finished app - If the audio is too loud, then turn it\r\n              down using the Windows Mixer (Right click on your audio icon in\r\n              the bottom right, open volume mixer then reduce chrome). Don't\r\n              turn it off though, youre going to need it to complete the game,\r\n              once youve adjusted your sound feel free to pause the elevator\r\n              music.\r\n            </h4>\r\n\r\n            <p>\r\n              While you wait, familiarise yourself with the following rules, so\r\n              we can get going as the game can take an hour!\r\n            </p>\r\n            <ol>\r\n              <li>\r\n                You'll be presented a \"hand\" of cards at the start of the game,\r\n                these cards come in 4 different types\r\n                <br />\r\n                --Red and Blue Cards, Add Red Cards to Blue Cards to combine\r\n                items and solve puzzles, let Dave K know which cards you want to\r\n                try and he can submit them, be careful though, some card\r\n                combinations can cause a time penalty!\r\n                <br />\r\n                --Yellow Cards are generally puzzles or part of a puzzle but\r\n                they do not need to be added to other cards\r\n                <br />\r\n                --Grey cards cannot be interacted with and are generally only\r\n                for story/setting a scene\r\n                <br />\r\n                --Green cards are minigames that must be performed by the host,\r\n                when you think you're ready to solve a green cards puzzle let\r\n                the host know!\r\n              </li>\r\n\r\n              <li>\r\n                Communication is key, if you don't talk it out you won't win.\r\n              </li>\r\n              <li>\r\n                You have one hour from when the intro sound clip plays to\r\n                complete the game, if you do not complete it within an hour you\r\n                lose and Dave K has to buy everyone dinner.\r\n              </li>\r\n              <li>\r\n                You'll be provided hints at the right time to keep the game\r\n                moving, asking for hints will be met with silence and\r\n                indignation\r\n              </li>\r\n              <li>\r\n                Lastly, if you think you might be missing a card that should be\r\n                in play then say something! This was built in a few hours for a\r\n                bit of fun and isn't fully tested\r\n              </li>\r\n            </ol>\r\n          </div>\r\n          <div></div>\r\n        </div>\r\n      ) : cards && cards.length === 0 ? (\r\n        <div className=\"centerFlex\">\r\n          <div></div>\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <h2>The Game is Starting</h2>\r\n            <h3>Good Luck</h3>\r\n          </div>\r\n          <div></div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"centerFlex\">\r\n          <header className=\"header\">\r\n            {hint ? (\r\n              <p className=\"hint\">{hint}</p>\r\n            ) : (\r\n              \"A thick smoke lingers over the region. Another dirty trick from Noside? Stop him before it's too late.\"\r\n            )}\r\n\r\n            {playingClockHint && (\r\n              <iframe\r\n                width=\"560\"\r\n                height=\"315\"\r\n                src=\"https://www.youtube.com/embed/9KdInj2Sp8o?autoplay=1\"\r\n                frameborder=\"0\"\r\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n                allowfullscreen\r\n                style={{ display: \"none\" }}\r\n              ></iframe>\r\n            )}\r\n          </header>\r\n          {shownCard &&\r\n          cards.filter((x) => x.id === shownCard.id).length > 0 ? (\r\n            <div className=\"bigCardContainer\">\r\n              <img\r\n                className=\"card cardBig\"\r\n                src={`${process.env.PUBLIC_URL}/NoSideCards/${shownCard.id}.png`}\r\n              />\r\n              {playerName.toLowerCase() === \"dave k\" && (\r\n                <form onSubmit={(e) => onSubmit(e)}>\r\n                  <label>Red</label>\r\n                  <input\r\n                    className=\"cardInput\"\r\n                    onChange={(e) => setRed(e.target.value)}\r\n                  />\r\n                  <label>Blue</label>\r\n                  <input\r\n                    className=\"cardInput\"\r\n                    onChange={(e) => setBlue(e.target.value)}\r\n                  />\r\n                  <button type=\"submit\">Submit</button>\r\n                </form>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className=\"card cardBig\">\r\n              <h1>No Card Selected</h1>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"hand\">\r\n            {cards &&\r\n              cards.map((card) => (\r\n                <img\r\n                  key={card.id}\r\n                  className=\"card\"\r\n                  onClick={() => setShownCard(card)}\r\n                  src={`${process.env.PUBLIC_URL}/NoSideCards/${card.id}.png`}\r\n                />\r\n              ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n      {playerName === \"BIGDICKDAZ\" && (\r\n        <Admin\r\n          allCards={allCards}\r\n          showCard={showCard}\r\n          hideCard={hideCard}\r\n          hubConnection={hubConnection}\r\n          setPlayingIntro={setPlayingIntro}\r\n          setPlayingClockHint={setPlayingClockHint}\r\n          setPlayingMusic={setPlayingMusic}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport Game from \"./Game\";\n\nfunction App() {\n  const [playerName, setPlayerName] = useState(\"Tal\");\n  const [submitted, setSubmitted] = useState(false);\n\n  if (submitted) {\n    return <Game playerName={playerName} />;\n  }\n\n  return (\n    <div className=\"centerFlex column\">\n      <div></div>\n      <div>\n        <h2 className=\"title\">Before we begin, we need your name</h2>\n        <form\n          onSubmit={() => setSubmitted(true)}\n          style={{ display: \"flex\" }}\n          className=\"column\"\n        >\n          <input\n            placeholder=\"Who are you?\"\n            className=\"inputBig\"\n            onChange={(e) => {\n              setPlayerName(e.target.value);\n            }}\n          ></input>\n          <button type=\"submit\" style={{ marginTop: \"10px\" }}>\n            Let me play!\n          </button>\n        </form>\n      </div>\n      <div></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}